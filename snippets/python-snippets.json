{
    "Manifest": {
        "prefix": "oomanifest",
        "body": [
            "{",
            "\t'name': '${1}',",
            "\t'version': '${2:1.0}',",
            "\t'description': '${3}',",
            "\t'summary': '${4}',",
            "\t'author': '${5}',",
            "\t'website': '${6}',",
            "\t'license': '${7:LGPL-3}',",
            "\t'category': '${8}',",
            "\t'depends': [\n\t\t'${9}'\n\t],",
            "\t'data': [\n\t\t'${10}'\n\t],",
            "\t'demo': [\n\t\t'${11}'\n\t],",
            "\t'auto_install': ${12|True,False|},",
            "\t'application': ${13|True,False|},",
            "}"
        ],
        "description": "Add manifest json"
    },
    "Import": {
        "prefix": "ooimport",
        "body": [
            "from odoo import _, api, fields, models",
            "\n"
        ],
        "description": "Add an import"
    },
    "From import": {
        "prefix": "oofimport",
        "body": "from . import ${1:names}",
        "description" : "Add from import"
    },
    "Model": {
        "prefix": "oomodel",
        "body": [
            "class ${30:${20/([a-z]+)[\\._]?/${1:/capitalize}/g}}(models.${40|Model,AbstractModel,TransientModel|}):",
            "\t${10|_name,_inherit|} = '${20:model.technical.name}'",
            "\t_description = '${50:${20/([a-z]+)([\\._]?)/${1:/capitalize}${2:+ }/g}}'",
            "\t"
        ],
        "description": "Add model"
    },
    "Char field": {
        "prefix": "oofchar",
        "body": [
            "${1:field_name} = fields.Char(string='${2}')${0}"
        ],
        "description": "Add char field"
    },
    "Text field": {
        "prefix": "ooftext",
        "body": [
            "${1:field_name} = fields.Text(string='${2}')${0}"
        ],
        "description": "Add text field"
    },
    "Html field": {
        "prefix": "oofhtml",
        "body": [
            "${1:field_name} = fields.Html(string='${2}')${0}"
        ],
        "description": "Add html field"
    },
    "Boolean field": {
        "prefix": "oofboolean",
        "body": [
            "${1:field_name} = fields.Boolean(string='${2}')${0}"
        ],
        "description": "Add boolean field"
    },
    "Integer field": {
        "prefix": "oofinteger",
        "body": [
            "${1:field_name} = fields.Integer(string='${2}')${0}"
        ],
        "description": "Add integer field"
    },
    "Float field": {
        "prefix": "ooffloat",
        "body": [
            "${1:field_name} = fields.Float(string='${2}', digits=(${3:total, decimal}))${0}"
        ],
        "description": "Add float field"
    },
    "Selection field": {
        "prefix": "oofselection",
        "body": [
            "${1:field_name} = fields.Selection([",
            "\t('${2:key}', '${3:value}')",
            "], string='${4}')${0}"
        ],
        "description": "Add selection field"
    },
    "Date field": {
        "prefix": "oofdate",
        "body": [
            "${1:field_name} = fields.Date(string='${2}')${0}"
        ],
        "description": "Add date field"
    },
    "Datetime field": {
        "prefix": "oofdatetime",
        "body": [
            "${1:field_name} = fields.Datetime(string='${2}')${0}"
        ],
        "description": "Add datetime field"
    },
    "Binary field": {
        "prefix": "oofbinary",
        "body": [
            "${1:field_name} = fields.Binary(string='${2}')${0}"
        ],
        "description": "Add binary field"
    },
    "Monetary field": {
        "prefix": "oofmonetary",
        "body": [
            "${1:field_name} = fields.Monetary(string='${2}')${0}"
        ],
        "description": "Add monetary field"
    },
    "Many2one field": {
        "prefix": "oofmany2one",
        "body": [
            "${1:field_name} = fields.Many2one('${2:comodel_name}', string='${3}')${0}"
        ],
        "description": "Add many2one field"
    },
    "One2many field": {
        "prefix": "oofone2many",
        "body": [
            "${1:field_name} = fields.One2many('${2:comodel_name}', '${3:inverse_field_name}', string='${4}')${0}"
        ],
        "description": "Add one2many field"
    },
    "Many2many field": {
        "prefix": "oofmany2many",
        "body": [
            "${1:field_name} = fields.Many2many('${2:comodel_name}', string='${3}')${0}"
        ],
        "description": "Add many2many field"
    },
    "Compute field": {
        "prefix": "oofcompute",
        "body": [
            "${1:field_name} = fields.${2|Char,Text,Html,Boolean,Integer,Float,Date,Datetime,Binary,Monetary|}(compute='_compute_${1}', string='${3}')",
            "",
            "@api.depends('${0}')",
            "def _compute_${1}(self):",
            "\tpass"
        ],
        "description": "Add compute field"
    },
    "Compute field with inverse": {
        "prefix": "oofcomputei",
        "body": [
            "${1:field_name} = fields.${2|Char,Text,Html,Boolean,Integer,Float,Date,Datetime,Binary|}(compute='_compute_${1}', inverse='_inverse_${1}', string='${3}')",
            "",
            "@api.depends('${0}')",
            "def _compute_${1}(self):",
            "\tpass",
            "def _inverse_${1}(self):",
            "\tpass"
        ],
        "description": "Add compute field with inverse method"
    },
    "Onchange field": {
        "prefix": "oofonchange",
        "body": [
            "@api.onchange('${1}')",
            "def _onchange_${1}(self):",
            "\t${0:pass}"
        ],
        "description": "Add onchange field"
    },
    "Constrains on field": {
        "prefix": "oofconstrains",
        "body": [
            "@api.constrains('${1:fieldname}')",
            "def _constrains_${1}(self):",
            "\t${0:pass}"
        ],
        "description": "Add constrains on field"
    },
    "Create method": {
        "prefix": "oocreate",
        "body": [
            "@api.${1|model,model_create_multi|}",
            "def create(self, ${2:vals}):",
            "\treturn super().create(${2:vals})"
        ],
        "description": "Add create method"
    },
    "Write method": {
        "prefix": "oowrite",
        "body": [
            "@api.multi",
            "def write(self, vals):",
            "\treturn super().write(vals)"
        ],
        "description": "Add write method"
    },
    "Unlink method": {
        "prefix": "oounlink",
        "body": [
            "@api.multi",
            "def unlink(self):",
            "\treturn super().unlink()"
        ],
        "description": "Add unlink method"
    }
}
